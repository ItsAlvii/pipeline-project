name: Deploy Phase

on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SSH_USER:
        required: true
      EC2_STAGE_HOST:
        required: true
      EC2_PROD_HOST:
        required: true

jobs:
  stage:
    name: stage
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging EC2
        uses: appleboy/ssh-action@v1.8.0
        with:
          host: ${{ secrets.EC2_STAGE_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pipeline-backend:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pipeline-frontend:latest || true
            docker stop backend frontend || true
            docker rm backend frontend || true
            docker network create app-network 2>/dev/null || true
            docker run -d --name backend --network app-network ${{ secrets.DOCKERHUB_USERNAME }}/pipeline-backend:latest
            docker run -d --name frontend --network app-network -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/pipeline-frontend:latest

  approval:
    name: approval
    runs-on: ubuntu-latest
    needs: stage
    steps:
      - name: Manual approval (pause)
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          minimum-approvals: 1

  prod:
    name: prod
    runs-on: ubuntu-latest
    needs: approval
    steps:
      - name: Deploy to Production EC2
        uses: appleboy/ssh-action@v1.8.0
        with:
          host: ${{ secrets.EC2_PROD_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pipeline-backend:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pipeline-frontend:latest || true
            docker stop backend frontend || true
            docker rm backend frontend || true
            docker network create app-network 2>/dev/null || true
            docker run -d --name backend --network app-network ${{ secrets.DOCKERHUB_USERNAME }}/pipeline-backend:latest
            docker run -d --name frontend --network app-network -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/pipeline-frontend:latest

